// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"nevissGo/ent/pixel"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Pixel is the model entity for the Pixel schema.
type Pixel struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"oid,omitempty"`
	// Color holds the value of the "color" field.
	Color string `json:"color,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PixelQuery when eager-loading is set.
	Edges        PixelEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PixelEdges holds the relations/edges for other nodes in the graph.
type PixelEdges struct {
	// User holds the value of the user edge.
	User []*User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading.
func (e PixelEdges) UserOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Pixel) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case pixel.FieldID:
			values[i] = new(sql.NullInt64)
		case pixel.FieldColor:
			values[i] = new(sql.NullString)
		case pixel.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Pixel fields.
func (pi *Pixel) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case pixel.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pi.ID = int(value.Int64)
		case pixel.FieldColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field color", values[i])
			} else if value.Valid {
				pi.Color = value.String
			}
		case pixel.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pi.UpdatedAt = value.Time
			}
		default:
			pi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Pixel.
// This includes values selected through modifiers, order, etc.
func (pi *Pixel) Value(name string) (ent.Value, error) {
	return pi.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Pixel entity.
func (pi *Pixel) QueryUser() *UserQuery {
	return NewPixelClient(pi.config).QueryUser(pi)
}

// Update returns a builder for updating this Pixel.
// Note that you need to call Pixel.Unwrap() before calling this method if this Pixel
// was returned from a transaction, and the transaction was committed or rolled back.
func (pi *Pixel) Update() *PixelUpdateOne {
	return NewPixelClient(pi.config).UpdateOne(pi)
}

// Unwrap unwraps the Pixel entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pi *Pixel) Unwrap() *Pixel {
	_tx, ok := pi.config.driver.(*txDriver)
	if !ok {
		panic("ent: Pixel is not a transactional entity")
	}
	pi.config.driver = _tx.drv
	return pi
}

// String implements the fmt.Stringer.
func (pi *Pixel) String() string {
	var builder strings.Builder
	builder.WriteString("Pixel(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pi.ID))
	builder.WriteString("color=")
	builder.WriteString(pi.Color)
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pi.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Pixels is a parsable slice of Pixel.
type Pixels []*Pixel
