// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"nevissGo/ent/hype"
	"nevissGo/ent/predicate"
	"nevissGo/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HypeUpdate is the builder for updating Hype entities.
type HypeUpdate struct {
	config
	hooks    []Hook
	mutation *HypeMutation
}

// Where appends a list predicates to the HypeUpdate builder.
func (hu *HypeUpdate) Where(ps ...predicate.Hype) *HypeUpdate {
	hu.mutation.Where(ps...)
	return hu
}

// SetAmountRemaining sets the "amount_remaining" field.
func (hu *HypeUpdate) SetAmountRemaining(i int) *HypeUpdate {
	hu.mutation.ResetAmountRemaining()
	hu.mutation.SetAmountRemaining(i)
	return hu
}

// SetNillableAmountRemaining sets the "amount_remaining" field if the given value is not nil.
func (hu *HypeUpdate) SetNillableAmountRemaining(i *int) *HypeUpdate {
	if i != nil {
		hu.SetAmountRemaining(*i)
	}
	return hu
}

// AddAmountRemaining adds i to the "amount_remaining" field.
func (hu *HypeUpdate) AddAmountRemaining(i int) *HypeUpdate {
	hu.mutation.AddAmountRemaining(i)
	return hu
}

// SetMaxHype sets the "max_hype" field.
func (hu *HypeUpdate) SetMaxHype(i int) *HypeUpdate {
	hu.mutation.ResetMaxHype()
	hu.mutation.SetMaxHype(i)
	return hu
}

// SetNillableMaxHype sets the "max_hype" field if the given value is not nil.
func (hu *HypeUpdate) SetNillableMaxHype(i *int) *HypeUpdate {
	if i != nil {
		hu.SetMaxHype(*i)
	}
	return hu
}

// AddMaxHype adds i to the "max_hype" field.
func (hu *HypeUpdate) AddMaxHype(i int) *HypeUpdate {
	hu.mutation.AddMaxHype(i)
	return hu
}

// SetLastUpdatedAt sets the "last_updated_at" field.
func (hu *HypeUpdate) SetLastUpdatedAt(t time.Time) *HypeUpdate {
	hu.mutation.SetLastUpdatedAt(t)
	return hu
}

// SetHypePerMinute sets the "hype_per_minute" field.
func (hu *HypeUpdate) SetHypePerMinute(i int) *HypeUpdate {
	hu.mutation.ResetHypePerMinute()
	hu.mutation.SetHypePerMinute(i)
	return hu
}

// SetNillableHypePerMinute sets the "hype_per_minute" field if the given value is not nil.
func (hu *HypeUpdate) SetNillableHypePerMinute(i *int) *HypeUpdate {
	if i != nil {
		hu.SetHypePerMinute(*i)
	}
	return hu
}

// AddHypePerMinute adds i to the "hype_per_minute" field.
func (hu *HypeUpdate) AddHypePerMinute(i int) *HypeUpdate {
	hu.mutation.AddHypePerMinute(i)
	return hu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (hu *HypeUpdate) SetUserID(id int64) *HypeUpdate {
	hu.mutation.SetUserID(id)
	return hu
}

// SetUser sets the "user" edge to the User entity.
func (hu *HypeUpdate) SetUser(u *User) *HypeUpdate {
	return hu.SetUserID(u.ID)
}

// Mutation returns the HypeMutation object of the builder.
func (hu *HypeUpdate) Mutation() *HypeMutation {
	return hu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (hu *HypeUpdate) ClearUser() *HypeUpdate {
	hu.mutation.ClearUser()
	return hu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hu *HypeUpdate) Save(ctx context.Context) (int, error) {
	hu.defaults()
	return withHooks(ctx, hu.sqlSave, hu.mutation, hu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hu *HypeUpdate) SaveX(ctx context.Context) int {
	affected, err := hu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hu *HypeUpdate) Exec(ctx context.Context) error {
	_, err := hu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hu *HypeUpdate) ExecX(ctx context.Context) {
	if err := hu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hu *HypeUpdate) defaults() {
	if _, ok := hu.mutation.LastUpdatedAt(); !ok {
		v := hype.UpdateDefaultLastUpdatedAt()
		hu.mutation.SetLastUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hu *HypeUpdate) check() error {
	if hu.mutation.UserCleared() && len(hu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Hype.user"`)
	}
	return nil
}

func (hu *HypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := hu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(hype.Table, hype.Columns, sqlgraph.NewFieldSpec(hype.FieldID, field.TypeInt))
	if ps := hu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hu.mutation.AmountRemaining(); ok {
		_spec.SetField(hype.FieldAmountRemaining, field.TypeInt, value)
	}
	if value, ok := hu.mutation.AddedAmountRemaining(); ok {
		_spec.AddField(hype.FieldAmountRemaining, field.TypeInt, value)
	}
	if value, ok := hu.mutation.MaxHype(); ok {
		_spec.SetField(hype.FieldMaxHype, field.TypeInt, value)
	}
	if value, ok := hu.mutation.AddedMaxHype(); ok {
		_spec.AddField(hype.FieldMaxHype, field.TypeInt, value)
	}
	if value, ok := hu.mutation.LastUpdatedAt(); ok {
		_spec.SetField(hype.FieldLastUpdatedAt, field.TypeTime, value)
	}
	if value, ok := hu.mutation.HypePerMinute(); ok {
		_spec.SetField(hype.FieldHypePerMinute, field.TypeInt, value)
	}
	if value, ok := hu.mutation.AddedHypePerMinute(); ok {
		_spec.AddField(hype.FieldHypePerMinute, field.TypeInt, value)
	}
	if hu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   hype.UserTable,
			Columns: []string{hype.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   hype.UserTable,
			Columns: []string{hype.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	hu.mutation.done = true
	return n, nil
}

// HypeUpdateOne is the builder for updating a single Hype entity.
type HypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HypeMutation
}

// SetAmountRemaining sets the "amount_remaining" field.
func (huo *HypeUpdateOne) SetAmountRemaining(i int) *HypeUpdateOne {
	huo.mutation.ResetAmountRemaining()
	huo.mutation.SetAmountRemaining(i)
	return huo
}

// SetNillableAmountRemaining sets the "amount_remaining" field if the given value is not nil.
func (huo *HypeUpdateOne) SetNillableAmountRemaining(i *int) *HypeUpdateOne {
	if i != nil {
		huo.SetAmountRemaining(*i)
	}
	return huo
}

// AddAmountRemaining adds i to the "amount_remaining" field.
func (huo *HypeUpdateOne) AddAmountRemaining(i int) *HypeUpdateOne {
	huo.mutation.AddAmountRemaining(i)
	return huo
}

// SetMaxHype sets the "max_hype" field.
func (huo *HypeUpdateOne) SetMaxHype(i int) *HypeUpdateOne {
	huo.mutation.ResetMaxHype()
	huo.mutation.SetMaxHype(i)
	return huo
}

// SetNillableMaxHype sets the "max_hype" field if the given value is not nil.
func (huo *HypeUpdateOne) SetNillableMaxHype(i *int) *HypeUpdateOne {
	if i != nil {
		huo.SetMaxHype(*i)
	}
	return huo
}

// AddMaxHype adds i to the "max_hype" field.
func (huo *HypeUpdateOne) AddMaxHype(i int) *HypeUpdateOne {
	huo.mutation.AddMaxHype(i)
	return huo
}

// SetLastUpdatedAt sets the "last_updated_at" field.
func (huo *HypeUpdateOne) SetLastUpdatedAt(t time.Time) *HypeUpdateOne {
	huo.mutation.SetLastUpdatedAt(t)
	return huo
}

// SetHypePerMinute sets the "hype_per_minute" field.
func (huo *HypeUpdateOne) SetHypePerMinute(i int) *HypeUpdateOne {
	huo.mutation.ResetHypePerMinute()
	huo.mutation.SetHypePerMinute(i)
	return huo
}

// SetNillableHypePerMinute sets the "hype_per_minute" field if the given value is not nil.
func (huo *HypeUpdateOne) SetNillableHypePerMinute(i *int) *HypeUpdateOne {
	if i != nil {
		huo.SetHypePerMinute(*i)
	}
	return huo
}

// AddHypePerMinute adds i to the "hype_per_minute" field.
func (huo *HypeUpdateOne) AddHypePerMinute(i int) *HypeUpdateOne {
	huo.mutation.AddHypePerMinute(i)
	return huo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (huo *HypeUpdateOne) SetUserID(id int64) *HypeUpdateOne {
	huo.mutation.SetUserID(id)
	return huo
}

// SetUser sets the "user" edge to the User entity.
func (huo *HypeUpdateOne) SetUser(u *User) *HypeUpdateOne {
	return huo.SetUserID(u.ID)
}

// Mutation returns the HypeMutation object of the builder.
func (huo *HypeUpdateOne) Mutation() *HypeMutation {
	return huo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (huo *HypeUpdateOne) ClearUser() *HypeUpdateOne {
	huo.mutation.ClearUser()
	return huo
}

// Where appends a list predicates to the HypeUpdate builder.
func (huo *HypeUpdateOne) Where(ps ...predicate.Hype) *HypeUpdateOne {
	huo.mutation.Where(ps...)
	return huo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (huo *HypeUpdateOne) Select(field string, fields ...string) *HypeUpdateOne {
	huo.fields = append([]string{field}, fields...)
	return huo
}

// Save executes the query and returns the updated Hype entity.
func (huo *HypeUpdateOne) Save(ctx context.Context) (*Hype, error) {
	huo.defaults()
	return withHooks(ctx, huo.sqlSave, huo.mutation, huo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (huo *HypeUpdateOne) SaveX(ctx context.Context) *Hype {
	node, err := huo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (huo *HypeUpdateOne) Exec(ctx context.Context) error {
	_, err := huo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (huo *HypeUpdateOne) ExecX(ctx context.Context) {
	if err := huo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (huo *HypeUpdateOne) defaults() {
	if _, ok := huo.mutation.LastUpdatedAt(); !ok {
		v := hype.UpdateDefaultLastUpdatedAt()
		huo.mutation.SetLastUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (huo *HypeUpdateOne) check() error {
	if huo.mutation.UserCleared() && len(huo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Hype.user"`)
	}
	return nil
}

func (huo *HypeUpdateOne) sqlSave(ctx context.Context) (_node *Hype, err error) {
	if err := huo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(hype.Table, hype.Columns, sqlgraph.NewFieldSpec(hype.FieldID, field.TypeInt))
	id, ok := huo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Hype.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := huo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hype.FieldID)
		for _, f := range fields {
			if !hype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != hype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := huo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := huo.mutation.AmountRemaining(); ok {
		_spec.SetField(hype.FieldAmountRemaining, field.TypeInt, value)
	}
	if value, ok := huo.mutation.AddedAmountRemaining(); ok {
		_spec.AddField(hype.FieldAmountRemaining, field.TypeInt, value)
	}
	if value, ok := huo.mutation.MaxHype(); ok {
		_spec.SetField(hype.FieldMaxHype, field.TypeInt, value)
	}
	if value, ok := huo.mutation.AddedMaxHype(); ok {
		_spec.AddField(hype.FieldMaxHype, field.TypeInt, value)
	}
	if value, ok := huo.mutation.LastUpdatedAt(); ok {
		_spec.SetField(hype.FieldLastUpdatedAt, field.TypeTime, value)
	}
	if value, ok := huo.mutation.HypePerMinute(); ok {
		_spec.SetField(hype.FieldHypePerMinute, field.TypeInt, value)
	}
	if value, ok := huo.mutation.AddedHypePerMinute(); ok {
		_spec.AddField(hype.FieldHypePerMinute, field.TypeInt, value)
	}
	if huo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   hype.UserTable,
			Columns: []string{hype.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   hype.UserTable,
			Columns: []string{hype.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Hype{config: huo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, huo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	huo.mutation.done = true
	return _node, nil
}
