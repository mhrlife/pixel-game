// Code generated by ent, DO NOT EDIT.

package user

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDisplayName holds the string denoting the display_name field in the database.
	FieldDisplayName = "display_name"
	// FieldGameID holds the string denoting the game_id field in the database.
	FieldGameID = "game_id"
	// EdgePixels holds the string denoting the pixels edge name in mutations.
	EdgePixels = "pixels"
	// EdgeHype holds the string denoting the hype edge name in mutations.
	EdgeHype = "hype"
	// Table holds the table name of the user in the database.
	Table = "users"
	// PixelsTable is the table that holds the pixels relation/edge.
	PixelsTable = "pixels"
	// PixelsInverseTable is the table name for the Pixel entity.
	// It exists in this package in order to avoid circular dependency with the "pixel" package.
	PixelsInverseTable = "pixels"
	// PixelsColumn is the table column denoting the pixels relation/edge.
	PixelsColumn = "user_pixels"
	// HypeTable is the table that holds the hype relation/edge.
	HypeTable = "hypes"
	// HypeInverseTable is the table name for the Hype entity.
	// It exists in this package in order to avoid circular dependency with the "hype" package.
	HypeInverseTable = "hypes"
	// HypeColumn is the table column denoting the hype relation/edge.
	HypeColumn = "user_hype"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldDisplayName,
	FieldGameID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDisplayName orders the results by the display_name field.
func ByDisplayName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayName, opts...).ToFunc()
}

// ByGameID orders the results by the game_id field.
func ByGameID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGameID, opts...).ToFunc()
}

// ByPixelsCount orders the results by pixels count.
func ByPixelsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPixelsStep(), opts...)
	}
}

// ByPixels orders the results by pixels terms.
func ByPixels(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPixelsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByHypeField orders the results by hype field.
func ByHypeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHypeStep(), sql.OrderByField(field, opts...))
	}
}
func newPixelsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PixelsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PixelsTable, PixelsColumn),
	)
}
func newHypeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HypeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, HypeTable, HypeColumn),
	)
}
