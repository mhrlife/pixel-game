// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"nevissGo/ent/hype"
	"nevissGo/ent/pixel"
	"nevissGo/ent/predicate"
	"nevissGo/ent/user"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeHype  = "Hype"
	TypePixel = "Pixel"
	TypeUser  = "User"
)

// HypeMutation represents an operation that mutates the Hype nodes in the graph.
type HypeMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	amount_remaining    *int
	addamount_remaining *int
	max_hype            *int
	addmax_hype         *int
	last_updated_at     *time.Time
	hype_per_minute     *int
	addhype_per_minute  *int
	clearedFields       map[string]struct{}
	user                *int64
	cleareduser         bool
	done                bool
	oldValue            func(context.Context) (*Hype, error)
	predicates          []predicate.Hype
}

var _ ent.Mutation = (*HypeMutation)(nil)

// hypeOption allows management of the mutation configuration using functional options.
type hypeOption func(*HypeMutation)

// newHypeMutation creates new mutation for the Hype entity.
func newHypeMutation(c config, op Op, opts ...hypeOption) *HypeMutation {
	m := &HypeMutation{
		config:        c,
		op:            op,
		typ:           TypeHype,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withHypeID sets the ID field of the mutation.
func withHypeID(id int) hypeOption {
	return func(m *HypeMutation) {
		var (
			err   error
			once  sync.Once
			value *Hype
		)
		m.oldValue = func(ctx context.Context) (*Hype, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Hype.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withHype sets the old Hype of the mutation.
func withHype(node *Hype) hypeOption {
	return func(m *HypeMutation) {
		m.oldValue = func(context.Context) (*Hype, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m HypeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m HypeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *HypeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *HypeMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Hype.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAmountRemaining sets the "amount_remaining" field.
func (m *HypeMutation) SetAmountRemaining(i int) {
	m.amount_remaining = &i
	m.addamount_remaining = nil
}

// AmountRemaining returns the value of the "amount_remaining" field in the mutation.
func (m *HypeMutation) AmountRemaining() (r int, exists bool) {
	v := m.amount_remaining
	if v == nil {
		return
	}
	return *v, true
}

// OldAmountRemaining returns the old "amount_remaining" field's value of the Hype entity.
// If the Hype object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HypeMutation) OldAmountRemaining(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmountRemaining is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmountRemaining requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmountRemaining: %w", err)
	}
	return oldValue.AmountRemaining, nil
}

// AddAmountRemaining adds i to the "amount_remaining" field.
func (m *HypeMutation) AddAmountRemaining(i int) {
	if m.addamount_remaining != nil {
		*m.addamount_remaining += i
	} else {
		m.addamount_remaining = &i
	}
}

// AddedAmountRemaining returns the value that was added to the "amount_remaining" field in this mutation.
func (m *HypeMutation) AddedAmountRemaining() (r int, exists bool) {
	v := m.addamount_remaining
	if v == nil {
		return
	}
	return *v, true
}

// ResetAmountRemaining resets all changes to the "amount_remaining" field.
func (m *HypeMutation) ResetAmountRemaining() {
	m.amount_remaining = nil
	m.addamount_remaining = nil
}

// SetMaxHype sets the "max_hype" field.
func (m *HypeMutation) SetMaxHype(i int) {
	m.max_hype = &i
	m.addmax_hype = nil
}

// MaxHype returns the value of the "max_hype" field in the mutation.
func (m *HypeMutation) MaxHype() (r int, exists bool) {
	v := m.max_hype
	if v == nil {
		return
	}
	return *v, true
}

// OldMaxHype returns the old "max_hype" field's value of the Hype entity.
// If the Hype object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HypeMutation) OldMaxHype(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMaxHype is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMaxHype requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMaxHype: %w", err)
	}
	return oldValue.MaxHype, nil
}

// AddMaxHype adds i to the "max_hype" field.
func (m *HypeMutation) AddMaxHype(i int) {
	if m.addmax_hype != nil {
		*m.addmax_hype += i
	} else {
		m.addmax_hype = &i
	}
}

// AddedMaxHype returns the value that was added to the "max_hype" field in this mutation.
func (m *HypeMutation) AddedMaxHype() (r int, exists bool) {
	v := m.addmax_hype
	if v == nil {
		return
	}
	return *v, true
}

// ResetMaxHype resets all changes to the "max_hype" field.
func (m *HypeMutation) ResetMaxHype() {
	m.max_hype = nil
	m.addmax_hype = nil
}

// SetLastUpdatedAt sets the "last_updated_at" field.
func (m *HypeMutation) SetLastUpdatedAt(t time.Time) {
	m.last_updated_at = &t
}

// LastUpdatedAt returns the value of the "last_updated_at" field in the mutation.
func (m *HypeMutation) LastUpdatedAt() (r time.Time, exists bool) {
	v := m.last_updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldLastUpdatedAt returns the old "last_updated_at" field's value of the Hype entity.
// If the Hype object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HypeMutation) OldLastUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastUpdatedAt: %w", err)
	}
	return oldValue.LastUpdatedAt, nil
}

// ResetLastUpdatedAt resets all changes to the "last_updated_at" field.
func (m *HypeMutation) ResetLastUpdatedAt() {
	m.last_updated_at = nil
}

// SetHypePerMinute sets the "hype_per_minute" field.
func (m *HypeMutation) SetHypePerMinute(i int) {
	m.hype_per_minute = &i
	m.addhype_per_minute = nil
}

// HypePerMinute returns the value of the "hype_per_minute" field in the mutation.
func (m *HypeMutation) HypePerMinute() (r int, exists bool) {
	v := m.hype_per_minute
	if v == nil {
		return
	}
	return *v, true
}

// OldHypePerMinute returns the old "hype_per_minute" field's value of the Hype entity.
// If the Hype object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HypeMutation) OldHypePerMinute(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHypePerMinute is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHypePerMinute requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHypePerMinute: %w", err)
	}
	return oldValue.HypePerMinute, nil
}

// AddHypePerMinute adds i to the "hype_per_minute" field.
func (m *HypeMutation) AddHypePerMinute(i int) {
	if m.addhype_per_minute != nil {
		*m.addhype_per_minute += i
	} else {
		m.addhype_per_minute = &i
	}
}

// AddedHypePerMinute returns the value that was added to the "hype_per_minute" field in this mutation.
func (m *HypeMutation) AddedHypePerMinute() (r int, exists bool) {
	v := m.addhype_per_minute
	if v == nil {
		return
	}
	return *v, true
}

// ResetHypePerMinute resets all changes to the "hype_per_minute" field.
func (m *HypeMutation) ResetHypePerMinute() {
	m.hype_per_minute = nil
	m.addhype_per_minute = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *HypeMutation) SetUserID(id int64) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *HypeMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *HypeMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *HypeMutation) UserID() (id int64, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *HypeMutation) UserIDs() (ids []int64) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *HypeMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the HypeMutation builder.
func (m *HypeMutation) Where(ps ...predicate.Hype) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the HypeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *HypeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Hype, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *HypeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *HypeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Hype).
func (m *HypeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *HypeMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.amount_remaining != nil {
		fields = append(fields, hype.FieldAmountRemaining)
	}
	if m.max_hype != nil {
		fields = append(fields, hype.FieldMaxHype)
	}
	if m.last_updated_at != nil {
		fields = append(fields, hype.FieldLastUpdatedAt)
	}
	if m.hype_per_minute != nil {
		fields = append(fields, hype.FieldHypePerMinute)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *HypeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case hype.FieldAmountRemaining:
		return m.AmountRemaining()
	case hype.FieldMaxHype:
		return m.MaxHype()
	case hype.FieldLastUpdatedAt:
		return m.LastUpdatedAt()
	case hype.FieldHypePerMinute:
		return m.HypePerMinute()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *HypeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case hype.FieldAmountRemaining:
		return m.OldAmountRemaining(ctx)
	case hype.FieldMaxHype:
		return m.OldMaxHype(ctx)
	case hype.FieldLastUpdatedAt:
		return m.OldLastUpdatedAt(ctx)
	case hype.FieldHypePerMinute:
		return m.OldHypePerMinute(ctx)
	}
	return nil, fmt.Errorf("unknown Hype field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HypeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case hype.FieldAmountRemaining:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmountRemaining(v)
		return nil
	case hype.FieldMaxHype:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMaxHype(v)
		return nil
	case hype.FieldLastUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastUpdatedAt(v)
		return nil
	case hype.FieldHypePerMinute:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHypePerMinute(v)
		return nil
	}
	return fmt.Errorf("unknown Hype field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *HypeMutation) AddedFields() []string {
	var fields []string
	if m.addamount_remaining != nil {
		fields = append(fields, hype.FieldAmountRemaining)
	}
	if m.addmax_hype != nil {
		fields = append(fields, hype.FieldMaxHype)
	}
	if m.addhype_per_minute != nil {
		fields = append(fields, hype.FieldHypePerMinute)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *HypeMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case hype.FieldAmountRemaining:
		return m.AddedAmountRemaining()
	case hype.FieldMaxHype:
		return m.AddedMaxHype()
	case hype.FieldHypePerMinute:
		return m.AddedHypePerMinute()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HypeMutation) AddField(name string, value ent.Value) error {
	switch name {
	case hype.FieldAmountRemaining:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAmountRemaining(v)
		return nil
	case hype.FieldMaxHype:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMaxHype(v)
		return nil
	case hype.FieldHypePerMinute:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddHypePerMinute(v)
		return nil
	}
	return fmt.Errorf("unknown Hype numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *HypeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *HypeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *HypeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Hype nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *HypeMutation) ResetField(name string) error {
	switch name {
	case hype.FieldAmountRemaining:
		m.ResetAmountRemaining()
		return nil
	case hype.FieldMaxHype:
		m.ResetMaxHype()
		return nil
	case hype.FieldLastUpdatedAt:
		m.ResetLastUpdatedAt()
		return nil
	case hype.FieldHypePerMinute:
		m.ResetHypePerMinute()
		return nil
	}
	return fmt.Errorf("unknown Hype field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *HypeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, hype.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *HypeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case hype.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *HypeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *HypeMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *HypeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, hype.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *HypeMutation) EdgeCleared(name string) bool {
	switch name {
	case hype.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *HypeMutation) ClearEdge(name string) error {
	switch name {
	case hype.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Hype unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *HypeMutation) ResetEdge(name string) error {
	switch name {
	case hype.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Hype edge %s", name)
}

// PixelMutation represents an operation that mutates the Pixel nodes in the graph.
type PixelMutation struct {
	config
	op            Op
	typ           string
	id            *int
	color         *string
	updated_at    *time.Time
	clearedFields map[string]struct{}
	user          *int64
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*Pixel, error)
	predicates    []predicate.Pixel
}

var _ ent.Mutation = (*PixelMutation)(nil)

// pixelOption allows management of the mutation configuration using functional options.
type pixelOption func(*PixelMutation)

// newPixelMutation creates new mutation for the Pixel entity.
func newPixelMutation(c config, op Op, opts ...pixelOption) *PixelMutation {
	m := &PixelMutation{
		config:        c,
		op:            op,
		typ:           TypePixel,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPixelID sets the ID field of the mutation.
func withPixelID(id int) pixelOption {
	return func(m *PixelMutation) {
		var (
			err   error
			once  sync.Once
			value *Pixel
		)
		m.oldValue = func(ctx context.Context) (*Pixel, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Pixel.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPixel sets the old Pixel of the mutation.
func withPixel(node *Pixel) pixelOption {
	return func(m *PixelMutation) {
		m.oldValue = func(context.Context) (*Pixel, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PixelMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PixelMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Pixel entities.
func (m *PixelMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PixelMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PixelMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Pixel.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetColor sets the "color" field.
func (m *PixelMutation) SetColor(s string) {
	m.color = &s
}

// Color returns the value of the "color" field in the mutation.
func (m *PixelMutation) Color() (r string, exists bool) {
	v := m.color
	if v == nil {
		return
	}
	return *v, true
}

// OldColor returns the old "color" field's value of the Pixel entity.
// If the Pixel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PixelMutation) OldColor(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldColor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldColor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldColor: %w", err)
	}
	return oldValue.Color, nil
}

// ResetColor resets all changes to the "color" field.
func (m *PixelMutation) ResetColor() {
	m.color = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *PixelMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *PixelMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Pixel entity.
// If the Pixel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PixelMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *PixelMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *PixelMutation) SetUserID(id int64) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *PixelMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *PixelMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *PixelMutation) UserID() (id int64, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *PixelMutation) UserIDs() (ids []int64) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *PixelMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the PixelMutation builder.
func (m *PixelMutation) Where(ps ...predicate.Pixel) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PixelMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PixelMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Pixel, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PixelMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PixelMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Pixel).
func (m *PixelMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PixelMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.color != nil {
		fields = append(fields, pixel.FieldColor)
	}
	if m.updated_at != nil {
		fields = append(fields, pixel.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PixelMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case pixel.FieldColor:
		return m.Color()
	case pixel.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PixelMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case pixel.FieldColor:
		return m.OldColor(ctx)
	case pixel.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Pixel field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PixelMutation) SetField(name string, value ent.Value) error {
	switch name {
	case pixel.FieldColor:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetColor(v)
		return nil
	case pixel.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Pixel field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PixelMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PixelMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PixelMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Pixel numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PixelMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PixelMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PixelMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Pixel nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PixelMutation) ResetField(name string) error {
	switch name {
	case pixel.FieldColor:
		m.ResetColor()
		return nil
	case pixel.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Pixel field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PixelMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, pixel.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PixelMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case pixel.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PixelMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PixelMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PixelMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, pixel.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PixelMutation) EdgeCleared(name string) bool {
	switch name {
	case pixel.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PixelMutation) ClearEdge(name string) error {
	switch name {
	case pixel.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Pixel unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PixelMutation) ResetEdge(name string) error {
	switch name {
	case pixel.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Pixel edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	display_name  *string
	game_id       *string
	clearedFields map[string]struct{}
	pixels        map[int]struct{}
	removedpixels map[int]struct{}
	clearedpixels bool
	hype          *int
	clearedhype   bool
	done          bool
	oldValue      func(context.Context) (*User, error)
	predicates    []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int64) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDisplayName sets the "display_name" field.
func (m *UserMutation) SetDisplayName(s string) {
	m.display_name = &s
}

// DisplayName returns the value of the "display_name" field in the mutation.
func (m *UserMutation) DisplayName() (r string, exists bool) {
	v := m.display_name
	if v == nil {
		return
	}
	return *v, true
}

// OldDisplayName returns the old "display_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldDisplayName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisplayName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisplayName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisplayName: %w", err)
	}
	return oldValue.DisplayName, nil
}

// ResetDisplayName resets all changes to the "display_name" field.
func (m *UserMutation) ResetDisplayName() {
	m.display_name = nil
}

// SetGameID sets the "game_id" field.
func (m *UserMutation) SetGameID(s string) {
	m.game_id = &s
}

// GameID returns the value of the "game_id" field in the mutation.
func (m *UserMutation) GameID() (r string, exists bool) {
	v := m.game_id
	if v == nil {
		return
	}
	return *v, true
}

// OldGameID returns the old "game_id" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldGameID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGameID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGameID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGameID: %w", err)
	}
	return oldValue.GameID, nil
}

// ResetGameID resets all changes to the "game_id" field.
func (m *UserMutation) ResetGameID() {
	m.game_id = nil
}

// AddPixelIDs adds the "pixels" edge to the Pixel entity by ids.
func (m *UserMutation) AddPixelIDs(ids ...int) {
	if m.pixels == nil {
		m.pixels = make(map[int]struct{})
	}
	for i := range ids {
		m.pixels[ids[i]] = struct{}{}
	}
}

// ClearPixels clears the "pixels" edge to the Pixel entity.
func (m *UserMutation) ClearPixels() {
	m.clearedpixels = true
}

// PixelsCleared reports if the "pixels" edge to the Pixel entity was cleared.
func (m *UserMutation) PixelsCleared() bool {
	return m.clearedpixels
}

// RemovePixelIDs removes the "pixels" edge to the Pixel entity by IDs.
func (m *UserMutation) RemovePixelIDs(ids ...int) {
	if m.removedpixels == nil {
		m.removedpixels = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.pixels, ids[i])
		m.removedpixels[ids[i]] = struct{}{}
	}
}

// RemovedPixels returns the removed IDs of the "pixels" edge to the Pixel entity.
func (m *UserMutation) RemovedPixelsIDs() (ids []int) {
	for id := range m.removedpixels {
		ids = append(ids, id)
	}
	return
}

// PixelsIDs returns the "pixels" edge IDs in the mutation.
func (m *UserMutation) PixelsIDs() (ids []int) {
	for id := range m.pixels {
		ids = append(ids, id)
	}
	return
}

// ResetPixels resets all changes to the "pixels" edge.
func (m *UserMutation) ResetPixels() {
	m.pixels = nil
	m.clearedpixels = false
	m.removedpixels = nil
}

// SetHypeID sets the "hype" edge to the Hype entity by id.
func (m *UserMutation) SetHypeID(id int) {
	m.hype = &id
}

// ClearHype clears the "hype" edge to the Hype entity.
func (m *UserMutation) ClearHype() {
	m.clearedhype = true
}

// HypeCleared reports if the "hype" edge to the Hype entity was cleared.
func (m *UserMutation) HypeCleared() bool {
	return m.clearedhype
}

// HypeID returns the "hype" edge ID in the mutation.
func (m *UserMutation) HypeID() (id int, exists bool) {
	if m.hype != nil {
		return *m.hype, true
	}
	return
}

// HypeIDs returns the "hype" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// HypeID instead. It exists only for internal usage by the builders.
func (m *UserMutation) HypeIDs() (ids []int) {
	if id := m.hype; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetHype resets all changes to the "hype" edge.
func (m *UserMutation) ResetHype() {
	m.hype = nil
	m.clearedhype = false
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.display_name != nil {
		fields = append(fields, user.FieldDisplayName)
	}
	if m.game_id != nil {
		fields = append(fields, user.FieldGameID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldDisplayName:
		return m.DisplayName()
	case user.FieldGameID:
		return m.GameID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldDisplayName:
		return m.OldDisplayName(ctx)
	case user.FieldGameID:
		return m.OldGameID(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldDisplayName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisplayName(v)
		return nil
	case user.FieldGameID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGameID(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldDisplayName:
		m.ResetDisplayName()
		return nil
	case user.FieldGameID:
		m.ResetGameID()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.pixels != nil {
		edges = append(edges, user.EdgePixels)
	}
	if m.hype != nil {
		edges = append(edges, user.EdgeHype)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgePixels:
		ids := make([]ent.Value, 0, len(m.pixels))
		for id := range m.pixels {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeHype:
		if id := m.hype; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedpixels != nil {
		edges = append(edges, user.EdgePixels)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgePixels:
		ids := make([]ent.Value, 0, len(m.removedpixels))
		for id := range m.removedpixels {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedpixels {
		edges = append(edges, user.EdgePixels)
	}
	if m.clearedhype {
		edges = append(edges, user.EdgeHype)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgePixels:
		return m.clearedpixels
	case user.EdgeHype:
		return m.clearedhype
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	case user.EdgeHype:
		m.ClearHype()
		return nil
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgePixels:
		m.ResetPixels()
		return nil
	case user.EdgeHype:
		m.ResetHype()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
