// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"nevissGo/ent/migrate"

	"nevissGo/ent/hype"
	"nevissGo/ent/pixel"
	"nevissGo/ent/user"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Hype is the client for interacting with the Hype builders.
	Hype *HypeClient
	// Pixel is the client for interacting with the Pixel builders.
	Pixel *PixelClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Hype = NewHypeClient(c.config)
	c.Pixel = NewPixelClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:    ctx,
		config: cfg,
		Hype:   NewHypeClient(cfg),
		Pixel:  NewPixelClient(cfg),
		User:   NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:    ctx,
		config: cfg,
		Hype:   NewHypeClient(cfg),
		Pixel:  NewPixelClient(cfg),
		User:   NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Hype.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Hype.Use(hooks...)
	c.Pixel.Use(hooks...)
	c.User.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Hype.Intercept(interceptors...)
	c.Pixel.Intercept(interceptors...)
	c.User.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *HypeMutation:
		return c.Hype.mutate(ctx, m)
	case *PixelMutation:
		return c.Pixel.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// HypeClient is a client for the Hype schema.
type HypeClient struct {
	config
}

// NewHypeClient returns a client for the Hype from the given config.
func NewHypeClient(c config) *HypeClient {
	return &HypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `hype.Hooks(f(g(h())))`.
func (c *HypeClient) Use(hooks ...Hook) {
	c.hooks.Hype = append(c.hooks.Hype, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `hype.Intercept(f(g(h())))`.
func (c *HypeClient) Intercept(interceptors ...Interceptor) {
	c.inters.Hype = append(c.inters.Hype, interceptors...)
}

// Create returns a builder for creating a Hype entity.
func (c *HypeClient) Create() *HypeCreate {
	mutation := newHypeMutation(c.config, OpCreate)
	return &HypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Hype entities.
func (c *HypeClient) CreateBulk(builders ...*HypeCreate) *HypeCreateBulk {
	return &HypeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *HypeClient) MapCreateBulk(slice any, setFunc func(*HypeCreate, int)) *HypeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &HypeCreateBulk{err: fmt.Errorf("calling to HypeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*HypeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &HypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Hype.
func (c *HypeClient) Update() *HypeUpdate {
	mutation := newHypeMutation(c.config, OpUpdate)
	return &HypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HypeClient) UpdateOne(h *Hype) *HypeUpdateOne {
	mutation := newHypeMutation(c.config, OpUpdateOne, withHype(h))
	return &HypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HypeClient) UpdateOneID(id int) *HypeUpdateOne {
	mutation := newHypeMutation(c.config, OpUpdateOne, withHypeID(id))
	return &HypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Hype.
func (c *HypeClient) Delete() *HypeDelete {
	mutation := newHypeMutation(c.config, OpDelete)
	return &HypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *HypeClient) DeleteOne(h *Hype) *HypeDeleteOne {
	return c.DeleteOneID(h.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *HypeClient) DeleteOneID(id int) *HypeDeleteOne {
	builder := c.Delete().Where(hype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HypeDeleteOne{builder}
}

// Query returns a query builder for Hype.
func (c *HypeClient) Query() *HypeQuery {
	return &HypeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeHype},
		inters: c.Interceptors(),
	}
}

// Get returns a Hype entity by its id.
func (c *HypeClient) Get(ctx context.Context, id int) (*Hype, error) {
	return c.Query().Where(hype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HypeClient) GetX(ctx context.Context, id int) *Hype {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Hype.
func (c *HypeClient) QueryUser(h *Hype) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := h.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hype.Table, hype.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, hype.UserTable, hype.UserColumn),
		)
		fromV = sqlgraph.Neighbors(h.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HypeClient) Hooks() []Hook {
	return c.hooks.Hype
}

// Interceptors returns the client interceptors.
func (c *HypeClient) Interceptors() []Interceptor {
	return c.inters.Hype
}

func (c *HypeClient) mutate(ctx context.Context, m *HypeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&HypeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&HypeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&HypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&HypeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Hype mutation op: %q", m.Op())
	}
}

// PixelClient is a client for the Pixel schema.
type PixelClient struct {
	config
}

// NewPixelClient returns a client for the Pixel from the given config.
func NewPixelClient(c config) *PixelClient {
	return &PixelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `pixel.Hooks(f(g(h())))`.
func (c *PixelClient) Use(hooks ...Hook) {
	c.hooks.Pixel = append(c.hooks.Pixel, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `pixel.Intercept(f(g(h())))`.
func (c *PixelClient) Intercept(interceptors ...Interceptor) {
	c.inters.Pixel = append(c.inters.Pixel, interceptors...)
}

// Create returns a builder for creating a Pixel entity.
func (c *PixelClient) Create() *PixelCreate {
	mutation := newPixelMutation(c.config, OpCreate)
	return &PixelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Pixel entities.
func (c *PixelClient) CreateBulk(builders ...*PixelCreate) *PixelCreateBulk {
	return &PixelCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PixelClient) MapCreateBulk(slice any, setFunc func(*PixelCreate, int)) *PixelCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PixelCreateBulk{err: fmt.Errorf("calling to PixelClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PixelCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PixelCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Pixel.
func (c *PixelClient) Update() *PixelUpdate {
	mutation := newPixelMutation(c.config, OpUpdate)
	return &PixelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PixelClient) UpdateOne(pi *Pixel) *PixelUpdateOne {
	mutation := newPixelMutation(c.config, OpUpdateOne, withPixel(pi))
	return &PixelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PixelClient) UpdateOneID(id int) *PixelUpdateOne {
	mutation := newPixelMutation(c.config, OpUpdateOne, withPixelID(id))
	return &PixelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Pixel.
func (c *PixelClient) Delete() *PixelDelete {
	mutation := newPixelMutation(c.config, OpDelete)
	return &PixelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PixelClient) DeleteOne(pi *Pixel) *PixelDeleteOne {
	return c.DeleteOneID(pi.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PixelClient) DeleteOneID(id int) *PixelDeleteOne {
	builder := c.Delete().Where(pixel.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PixelDeleteOne{builder}
}

// Query returns a query builder for Pixel.
func (c *PixelClient) Query() *PixelQuery {
	return &PixelQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePixel},
		inters: c.Interceptors(),
	}
}

// Get returns a Pixel entity by its id.
func (c *PixelClient) Get(ctx context.Context, id int) (*Pixel, error) {
	return c.Query().Where(pixel.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PixelClient) GetX(ctx context.Context, id int) *Pixel {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Pixel.
func (c *PixelClient) QueryUser(pi *Pixel) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(pixel.Table, pixel.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, pixel.UserTable, pixel.UserColumn),
		)
		fromV = sqlgraph.Neighbors(pi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PixelClient) Hooks() []Hook {
	return c.hooks.Pixel
}

// Interceptors returns the client interceptors.
func (c *PixelClient) Interceptors() []Interceptor {
	return c.inters.Pixel
}

func (c *PixelClient) mutate(ctx context.Context, m *PixelMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PixelCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PixelUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PixelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PixelDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Pixel mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int64) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int64) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int64) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int64) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPixels queries the pixels edge of a User.
func (c *UserClient) QueryPixels(u *User) *PixelQuery {
	query := (&PixelClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(pixel.Table, pixel.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.PixelsTable, user.PixelsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHype queries the hype edge of a User.
func (c *UserClient) QueryHype(u *User) *HypeQuery {
	query := (&HypeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(hype.Table, hype.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.HypeTable, user.HypeColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Hype, Pixel, User []ent.Hook
	}
	inters struct {
		Hype, Pixel, User []ent.Interceptor
	}
)
