// Code generated by ent, DO NOT EDIT.

package hype

import (
	"nevissGo/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Hype {
	return predicate.Hype(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Hype {
	return predicate.Hype(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Hype {
	return predicate.Hype(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Hype {
	return predicate.Hype(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Hype {
	return predicate.Hype(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Hype {
	return predicate.Hype(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Hype {
	return predicate.Hype(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Hype {
	return predicate.Hype(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Hype {
	return predicate.Hype(sql.FieldLTE(FieldID, id))
}

// AmountRemaining applies equality check predicate on the "amount_remaining" field. It's identical to AmountRemainingEQ.
func AmountRemaining(v int) predicate.Hype {
	return predicate.Hype(sql.FieldEQ(FieldAmountRemaining, v))
}

// MaxHype applies equality check predicate on the "max_hype" field. It's identical to MaxHypeEQ.
func MaxHype(v int) predicate.Hype {
	return predicate.Hype(sql.FieldEQ(FieldMaxHype, v))
}

// LastUpdatedAt applies equality check predicate on the "last_updated_at" field. It's identical to LastUpdatedAtEQ.
func LastUpdatedAt(v time.Time) predicate.Hype {
	return predicate.Hype(sql.FieldEQ(FieldLastUpdatedAt, v))
}

// HypePerMinute applies equality check predicate on the "hype_per_minute" field. It's identical to HypePerMinuteEQ.
func HypePerMinute(v int) predicate.Hype {
	return predicate.Hype(sql.FieldEQ(FieldHypePerMinute, v))
}

// AmountRemainingEQ applies the EQ predicate on the "amount_remaining" field.
func AmountRemainingEQ(v int) predicate.Hype {
	return predicate.Hype(sql.FieldEQ(FieldAmountRemaining, v))
}

// AmountRemainingNEQ applies the NEQ predicate on the "amount_remaining" field.
func AmountRemainingNEQ(v int) predicate.Hype {
	return predicate.Hype(sql.FieldNEQ(FieldAmountRemaining, v))
}

// AmountRemainingIn applies the In predicate on the "amount_remaining" field.
func AmountRemainingIn(vs ...int) predicate.Hype {
	return predicate.Hype(sql.FieldIn(FieldAmountRemaining, vs...))
}

// AmountRemainingNotIn applies the NotIn predicate on the "amount_remaining" field.
func AmountRemainingNotIn(vs ...int) predicate.Hype {
	return predicate.Hype(sql.FieldNotIn(FieldAmountRemaining, vs...))
}

// AmountRemainingGT applies the GT predicate on the "amount_remaining" field.
func AmountRemainingGT(v int) predicate.Hype {
	return predicate.Hype(sql.FieldGT(FieldAmountRemaining, v))
}

// AmountRemainingGTE applies the GTE predicate on the "amount_remaining" field.
func AmountRemainingGTE(v int) predicate.Hype {
	return predicate.Hype(sql.FieldGTE(FieldAmountRemaining, v))
}

// AmountRemainingLT applies the LT predicate on the "amount_remaining" field.
func AmountRemainingLT(v int) predicate.Hype {
	return predicate.Hype(sql.FieldLT(FieldAmountRemaining, v))
}

// AmountRemainingLTE applies the LTE predicate on the "amount_remaining" field.
func AmountRemainingLTE(v int) predicate.Hype {
	return predicate.Hype(sql.FieldLTE(FieldAmountRemaining, v))
}

// MaxHypeEQ applies the EQ predicate on the "max_hype" field.
func MaxHypeEQ(v int) predicate.Hype {
	return predicate.Hype(sql.FieldEQ(FieldMaxHype, v))
}

// MaxHypeNEQ applies the NEQ predicate on the "max_hype" field.
func MaxHypeNEQ(v int) predicate.Hype {
	return predicate.Hype(sql.FieldNEQ(FieldMaxHype, v))
}

// MaxHypeIn applies the In predicate on the "max_hype" field.
func MaxHypeIn(vs ...int) predicate.Hype {
	return predicate.Hype(sql.FieldIn(FieldMaxHype, vs...))
}

// MaxHypeNotIn applies the NotIn predicate on the "max_hype" field.
func MaxHypeNotIn(vs ...int) predicate.Hype {
	return predicate.Hype(sql.FieldNotIn(FieldMaxHype, vs...))
}

// MaxHypeGT applies the GT predicate on the "max_hype" field.
func MaxHypeGT(v int) predicate.Hype {
	return predicate.Hype(sql.FieldGT(FieldMaxHype, v))
}

// MaxHypeGTE applies the GTE predicate on the "max_hype" field.
func MaxHypeGTE(v int) predicate.Hype {
	return predicate.Hype(sql.FieldGTE(FieldMaxHype, v))
}

// MaxHypeLT applies the LT predicate on the "max_hype" field.
func MaxHypeLT(v int) predicate.Hype {
	return predicate.Hype(sql.FieldLT(FieldMaxHype, v))
}

// MaxHypeLTE applies the LTE predicate on the "max_hype" field.
func MaxHypeLTE(v int) predicate.Hype {
	return predicate.Hype(sql.FieldLTE(FieldMaxHype, v))
}

// LastUpdatedAtEQ applies the EQ predicate on the "last_updated_at" field.
func LastUpdatedAtEQ(v time.Time) predicate.Hype {
	return predicate.Hype(sql.FieldEQ(FieldLastUpdatedAt, v))
}

// LastUpdatedAtNEQ applies the NEQ predicate on the "last_updated_at" field.
func LastUpdatedAtNEQ(v time.Time) predicate.Hype {
	return predicate.Hype(sql.FieldNEQ(FieldLastUpdatedAt, v))
}

// LastUpdatedAtIn applies the In predicate on the "last_updated_at" field.
func LastUpdatedAtIn(vs ...time.Time) predicate.Hype {
	return predicate.Hype(sql.FieldIn(FieldLastUpdatedAt, vs...))
}

// LastUpdatedAtNotIn applies the NotIn predicate on the "last_updated_at" field.
func LastUpdatedAtNotIn(vs ...time.Time) predicate.Hype {
	return predicate.Hype(sql.FieldNotIn(FieldLastUpdatedAt, vs...))
}

// LastUpdatedAtGT applies the GT predicate on the "last_updated_at" field.
func LastUpdatedAtGT(v time.Time) predicate.Hype {
	return predicate.Hype(sql.FieldGT(FieldLastUpdatedAt, v))
}

// LastUpdatedAtGTE applies the GTE predicate on the "last_updated_at" field.
func LastUpdatedAtGTE(v time.Time) predicate.Hype {
	return predicate.Hype(sql.FieldGTE(FieldLastUpdatedAt, v))
}

// LastUpdatedAtLT applies the LT predicate on the "last_updated_at" field.
func LastUpdatedAtLT(v time.Time) predicate.Hype {
	return predicate.Hype(sql.FieldLT(FieldLastUpdatedAt, v))
}

// LastUpdatedAtLTE applies the LTE predicate on the "last_updated_at" field.
func LastUpdatedAtLTE(v time.Time) predicate.Hype {
	return predicate.Hype(sql.FieldLTE(FieldLastUpdatedAt, v))
}

// HypePerMinuteEQ applies the EQ predicate on the "hype_per_minute" field.
func HypePerMinuteEQ(v int) predicate.Hype {
	return predicate.Hype(sql.FieldEQ(FieldHypePerMinute, v))
}

// HypePerMinuteNEQ applies the NEQ predicate on the "hype_per_minute" field.
func HypePerMinuteNEQ(v int) predicate.Hype {
	return predicate.Hype(sql.FieldNEQ(FieldHypePerMinute, v))
}

// HypePerMinuteIn applies the In predicate on the "hype_per_minute" field.
func HypePerMinuteIn(vs ...int) predicate.Hype {
	return predicate.Hype(sql.FieldIn(FieldHypePerMinute, vs...))
}

// HypePerMinuteNotIn applies the NotIn predicate on the "hype_per_minute" field.
func HypePerMinuteNotIn(vs ...int) predicate.Hype {
	return predicate.Hype(sql.FieldNotIn(FieldHypePerMinute, vs...))
}

// HypePerMinuteGT applies the GT predicate on the "hype_per_minute" field.
func HypePerMinuteGT(v int) predicate.Hype {
	return predicate.Hype(sql.FieldGT(FieldHypePerMinute, v))
}

// HypePerMinuteGTE applies the GTE predicate on the "hype_per_minute" field.
func HypePerMinuteGTE(v int) predicate.Hype {
	return predicate.Hype(sql.FieldGTE(FieldHypePerMinute, v))
}

// HypePerMinuteLT applies the LT predicate on the "hype_per_minute" field.
func HypePerMinuteLT(v int) predicate.Hype {
	return predicate.Hype(sql.FieldLT(FieldHypePerMinute, v))
}

// HypePerMinuteLTE applies the LTE predicate on the "hype_per_minute" field.
func HypePerMinuteLTE(v int) predicate.Hype {
	return predicate.Hype(sql.FieldLTE(FieldHypePerMinute, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Hype {
	return predicate.Hype(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Hype {
	return predicate.Hype(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Hype) predicate.Hype {
	return predicate.Hype(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Hype) predicate.Hype {
	return predicate.Hype(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Hype) predicate.Hype {
	return predicate.Hype(sql.NotPredicates(p))
}
