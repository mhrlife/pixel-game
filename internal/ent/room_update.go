// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mhrlife/tonference/internal/ent/predicate"
	"github.com/mhrlife/tonference/internal/ent/room"
	"github.com/mhrlife/tonference/internal/ent/user"
)

// RoomUpdate is the builder for updating Room entities.
type RoomUpdate struct {
	config
	hooks    []Hook
	mutation *RoomMutation
}

// Where appends a list predicates to the RoomUpdate builder.
func (ru *RoomUpdate) Where(ps ...predicate.Room) *RoomUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetShortID sets the "short_id" field.
func (ru *RoomUpdate) SetShortID(s string) *RoomUpdate {
	ru.mutation.SetShortID(s)
	return ru
}

// SetNillableShortID sets the "short_id" field if the given value is not nil.
func (ru *RoomUpdate) SetNillableShortID(s *string) *RoomUpdate {
	if s != nil {
		ru.SetShortID(*s)
	}
	return ru
}

// SetStatus sets the "status" field.
func (ru *RoomUpdate) SetStatus(r room.Status) *RoomUpdate {
	ru.mutation.SetStatus(r)
	return ru
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ru *RoomUpdate) SetNillableStatus(r *room.Status) *RoomUpdate {
	if r != nil {
		ru.SetStatus(*r)
	}
	return ru
}

// SetMaxParticipants sets the "max_participants" field.
func (ru *RoomUpdate) SetMaxParticipants(i int8) *RoomUpdate {
	ru.mutation.ResetMaxParticipants()
	ru.mutation.SetMaxParticipants(i)
	return ru
}

// SetNillableMaxParticipants sets the "max_participants" field if the given value is not nil.
func (ru *RoomUpdate) SetNillableMaxParticipants(i *int8) *RoomUpdate {
	if i != nil {
		ru.SetMaxParticipants(*i)
	}
	return ru
}

// AddMaxParticipants adds i to the "max_participants" field.
func (ru *RoomUpdate) AddMaxParticipants(i int8) *RoomUpdate {
	ru.mutation.AddMaxParticipants(i)
	return ru
}

// SetPermissionVideo sets the "permission_video" field.
func (ru *RoomUpdate) SetPermissionVideo(rv room.PermissionVideo) *RoomUpdate {
	ru.mutation.SetPermissionVideo(rv)
	return ru
}

// SetNillablePermissionVideo sets the "permission_video" field if the given value is not nil.
func (ru *RoomUpdate) SetNillablePermissionVideo(rv *room.PermissionVideo) *RoomUpdate {
	if rv != nil {
		ru.SetPermissionVideo(*rv)
	}
	return ru
}

// SetPermissionAudio sets the "permission_audio" field.
func (ru *RoomUpdate) SetPermissionAudio(ra room.PermissionAudio) *RoomUpdate {
	ru.mutation.SetPermissionAudio(ra)
	return ru
}

// SetNillablePermissionAudio sets the "permission_audio" field if the given value is not nil.
func (ru *RoomUpdate) SetNillablePermissionAudio(ra *room.PermissionAudio) *RoomUpdate {
	if ra != nil {
		ru.SetPermissionAudio(*ra)
	}
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *RoomUpdate) SetUpdatedAt(t time.Time) *RoomUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// AddAdminIDs adds the "admins" edge to the User entity by IDs.
func (ru *RoomUpdate) AddAdminIDs(ids ...int64) *RoomUpdate {
	ru.mutation.AddAdminIDs(ids...)
	return ru
}

// AddAdmins adds the "admins" edges to the User entity.
func (ru *RoomUpdate) AddAdmins(u ...*User) *RoomUpdate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ru.AddAdminIDs(ids...)
}

// Mutation returns the RoomMutation object of the builder.
func (ru *RoomUpdate) Mutation() *RoomMutation {
	return ru.mutation
}

// ClearAdmins clears all "admins" edges to the User entity.
func (ru *RoomUpdate) ClearAdmins() *RoomUpdate {
	ru.mutation.ClearAdmins()
	return ru
}

// RemoveAdminIDs removes the "admins" edge to User entities by IDs.
func (ru *RoomUpdate) RemoveAdminIDs(ids ...int64) *RoomUpdate {
	ru.mutation.RemoveAdminIDs(ids...)
	return ru
}

// RemoveAdmins removes "admins" edges to User entities.
func (ru *RoomUpdate) RemoveAdmins(u ...*User) *RoomUpdate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ru.RemoveAdminIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RoomUpdate) Save(ctx context.Context) (int, error) {
	ru.defaults()
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RoomUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RoomUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RoomUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *RoomUpdate) defaults() {
	if _, ok := ru.mutation.UpdatedAt(); !ok {
		v := room.UpdateDefaultUpdatedAt()
		ru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *RoomUpdate) check() error {
	if v, ok := ru.mutation.Status(); ok {
		if err := room.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Room.status": %w`, err)}
		}
	}
	if v, ok := ru.mutation.PermissionVideo(); ok {
		if err := room.PermissionVideoValidator(v); err != nil {
			return &ValidationError{Name: "permission_video", err: fmt.Errorf(`ent: validator failed for field "Room.permission_video": %w`, err)}
		}
	}
	if v, ok := ru.mutation.PermissionAudio(); ok {
		if err := room.PermissionAudioValidator(v); err != nil {
			return &ValidationError{Name: "permission_audio", err: fmt.Errorf(`ent: validator failed for field "Room.permission_audio": %w`, err)}
		}
	}
	return nil
}

func (ru *RoomUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(room.Table, room.Columns, sqlgraph.NewFieldSpec(room.FieldID, field.TypeInt))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.ShortID(); ok {
		_spec.SetField(room.FieldShortID, field.TypeString, value)
	}
	if value, ok := ru.mutation.Status(); ok {
		_spec.SetField(room.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ru.mutation.MaxParticipants(); ok {
		_spec.SetField(room.FieldMaxParticipants, field.TypeInt8, value)
	}
	if value, ok := ru.mutation.AddedMaxParticipants(); ok {
		_spec.AddField(room.FieldMaxParticipants, field.TypeInt8, value)
	}
	if value, ok := ru.mutation.PermissionVideo(); ok {
		_spec.SetField(room.FieldPermissionVideo, field.TypeEnum, value)
	}
	if value, ok := ru.mutation.PermissionAudio(); ok {
		_spec.SetField(room.FieldPermissionAudio, field.TypeEnum, value)
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.SetField(room.FieldUpdatedAt, field.TypeTime, value)
	}
	if ru.mutation.AdminsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   room.AdminsTable,
			Columns: room.AdminsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedAdminsIDs(); len(nodes) > 0 && !ru.mutation.AdminsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   room.AdminsTable,
			Columns: room.AdminsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.AdminsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   room.AdminsTable,
			Columns: room.AdminsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{room.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RoomUpdateOne is the builder for updating a single Room entity.
type RoomUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RoomMutation
}

// SetShortID sets the "short_id" field.
func (ruo *RoomUpdateOne) SetShortID(s string) *RoomUpdateOne {
	ruo.mutation.SetShortID(s)
	return ruo
}

// SetNillableShortID sets the "short_id" field if the given value is not nil.
func (ruo *RoomUpdateOne) SetNillableShortID(s *string) *RoomUpdateOne {
	if s != nil {
		ruo.SetShortID(*s)
	}
	return ruo
}

// SetStatus sets the "status" field.
func (ruo *RoomUpdateOne) SetStatus(r room.Status) *RoomUpdateOne {
	ruo.mutation.SetStatus(r)
	return ruo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ruo *RoomUpdateOne) SetNillableStatus(r *room.Status) *RoomUpdateOne {
	if r != nil {
		ruo.SetStatus(*r)
	}
	return ruo
}

// SetMaxParticipants sets the "max_participants" field.
func (ruo *RoomUpdateOne) SetMaxParticipants(i int8) *RoomUpdateOne {
	ruo.mutation.ResetMaxParticipants()
	ruo.mutation.SetMaxParticipants(i)
	return ruo
}

// SetNillableMaxParticipants sets the "max_participants" field if the given value is not nil.
func (ruo *RoomUpdateOne) SetNillableMaxParticipants(i *int8) *RoomUpdateOne {
	if i != nil {
		ruo.SetMaxParticipants(*i)
	}
	return ruo
}

// AddMaxParticipants adds i to the "max_participants" field.
func (ruo *RoomUpdateOne) AddMaxParticipants(i int8) *RoomUpdateOne {
	ruo.mutation.AddMaxParticipants(i)
	return ruo
}

// SetPermissionVideo sets the "permission_video" field.
func (ruo *RoomUpdateOne) SetPermissionVideo(rv room.PermissionVideo) *RoomUpdateOne {
	ruo.mutation.SetPermissionVideo(rv)
	return ruo
}

// SetNillablePermissionVideo sets the "permission_video" field if the given value is not nil.
func (ruo *RoomUpdateOne) SetNillablePermissionVideo(rv *room.PermissionVideo) *RoomUpdateOne {
	if rv != nil {
		ruo.SetPermissionVideo(*rv)
	}
	return ruo
}

// SetPermissionAudio sets the "permission_audio" field.
func (ruo *RoomUpdateOne) SetPermissionAudio(ra room.PermissionAudio) *RoomUpdateOne {
	ruo.mutation.SetPermissionAudio(ra)
	return ruo
}

// SetNillablePermissionAudio sets the "permission_audio" field if the given value is not nil.
func (ruo *RoomUpdateOne) SetNillablePermissionAudio(ra *room.PermissionAudio) *RoomUpdateOne {
	if ra != nil {
		ruo.SetPermissionAudio(*ra)
	}
	return ruo
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *RoomUpdateOne) SetUpdatedAt(t time.Time) *RoomUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// AddAdminIDs adds the "admins" edge to the User entity by IDs.
func (ruo *RoomUpdateOne) AddAdminIDs(ids ...int64) *RoomUpdateOne {
	ruo.mutation.AddAdminIDs(ids...)
	return ruo
}

// AddAdmins adds the "admins" edges to the User entity.
func (ruo *RoomUpdateOne) AddAdmins(u ...*User) *RoomUpdateOne {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ruo.AddAdminIDs(ids...)
}

// Mutation returns the RoomMutation object of the builder.
func (ruo *RoomUpdateOne) Mutation() *RoomMutation {
	return ruo.mutation
}

// ClearAdmins clears all "admins" edges to the User entity.
func (ruo *RoomUpdateOne) ClearAdmins() *RoomUpdateOne {
	ruo.mutation.ClearAdmins()
	return ruo
}

// RemoveAdminIDs removes the "admins" edge to User entities by IDs.
func (ruo *RoomUpdateOne) RemoveAdminIDs(ids ...int64) *RoomUpdateOne {
	ruo.mutation.RemoveAdminIDs(ids...)
	return ruo
}

// RemoveAdmins removes "admins" edges to User entities.
func (ruo *RoomUpdateOne) RemoveAdmins(u ...*User) *RoomUpdateOne {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ruo.RemoveAdminIDs(ids...)
}

// Where appends a list predicates to the RoomUpdate builder.
func (ruo *RoomUpdateOne) Where(ps ...predicate.Room) *RoomUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RoomUpdateOne) Select(field string, fields ...string) *RoomUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Room entity.
func (ruo *RoomUpdateOne) Save(ctx context.Context) (*Room, error) {
	ruo.defaults()
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RoomUpdateOne) SaveX(ctx context.Context) *Room {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RoomUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RoomUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *RoomUpdateOne) defaults() {
	if _, ok := ruo.mutation.UpdatedAt(); !ok {
		v := room.UpdateDefaultUpdatedAt()
		ruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RoomUpdateOne) check() error {
	if v, ok := ruo.mutation.Status(); ok {
		if err := room.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Room.status": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.PermissionVideo(); ok {
		if err := room.PermissionVideoValidator(v); err != nil {
			return &ValidationError{Name: "permission_video", err: fmt.Errorf(`ent: validator failed for field "Room.permission_video": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.PermissionAudio(); ok {
		if err := room.PermissionAudioValidator(v); err != nil {
			return &ValidationError{Name: "permission_audio", err: fmt.Errorf(`ent: validator failed for field "Room.permission_audio": %w`, err)}
		}
	}
	return nil
}

func (ruo *RoomUpdateOne) sqlSave(ctx context.Context) (_node *Room, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(room.Table, room.Columns, sqlgraph.NewFieldSpec(room.FieldID, field.TypeInt))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Room.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, room.FieldID)
		for _, f := range fields {
			if !room.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != room.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.ShortID(); ok {
		_spec.SetField(room.FieldShortID, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Status(); ok {
		_spec.SetField(room.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ruo.mutation.MaxParticipants(); ok {
		_spec.SetField(room.FieldMaxParticipants, field.TypeInt8, value)
	}
	if value, ok := ruo.mutation.AddedMaxParticipants(); ok {
		_spec.AddField(room.FieldMaxParticipants, field.TypeInt8, value)
	}
	if value, ok := ruo.mutation.PermissionVideo(); ok {
		_spec.SetField(room.FieldPermissionVideo, field.TypeEnum, value)
	}
	if value, ok := ruo.mutation.PermissionAudio(); ok {
		_spec.SetField(room.FieldPermissionAudio, field.TypeEnum, value)
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.SetField(room.FieldUpdatedAt, field.TypeTime, value)
	}
	if ruo.mutation.AdminsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   room.AdminsTable,
			Columns: room.AdminsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedAdminsIDs(); len(nodes) > 0 && !ruo.mutation.AdminsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   room.AdminsTable,
			Columns: room.AdminsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.AdminsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   room.AdminsTable,
			Columns: room.AdminsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Room{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{room.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
