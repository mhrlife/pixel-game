// Code generated by ent, DO NOT EDIT.

package room

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/mhrlife/tonference/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Room {
	return predicate.Room(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Room {
	return predicate.Room(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Room {
	return predicate.Room(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Room {
	return predicate.Room(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Room {
	return predicate.Room(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Room {
	return predicate.Room(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Room {
	return predicate.Room(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Room {
	return predicate.Room(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Room {
	return predicate.Room(sql.FieldLTE(FieldID, id))
}

// ShortID applies equality check predicate on the "short_id" field. It's identical to ShortIDEQ.
func ShortID(v string) predicate.Room {
	return predicate.Room(sql.FieldEQ(FieldShortID, v))
}

// MaxParticipants applies equality check predicate on the "max_participants" field. It's identical to MaxParticipantsEQ.
func MaxParticipants(v int8) predicate.Room {
	return predicate.Room(sql.FieldEQ(FieldMaxParticipants, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Room {
	return predicate.Room(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Room {
	return predicate.Room(sql.FieldEQ(FieldUpdatedAt, v))
}

// ShortIDEQ applies the EQ predicate on the "short_id" field.
func ShortIDEQ(v string) predicate.Room {
	return predicate.Room(sql.FieldEQ(FieldShortID, v))
}

// ShortIDNEQ applies the NEQ predicate on the "short_id" field.
func ShortIDNEQ(v string) predicate.Room {
	return predicate.Room(sql.FieldNEQ(FieldShortID, v))
}

// ShortIDIn applies the In predicate on the "short_id" field.
func ShortIDIn(vs ...string) predicate.Room {
	return predicate.Room(sql.FieldIn(FieldShortID, vs...))
}

// ShortIDNotIn applies the NotIn predicate on the "short_id" field.
func ShortIDNotIn(vs ...string) predicate.Room {
	return predicate.Room(sql.FieldNotIn(FieldShortID, vs...))
}

// ShortIDGT applies the GT predicate on the "short_id" field.
func ShortIDGT(v string) predicate.Room {
	return predicate.Room(sql.FieldGT(FieldShortID, v))
}

// ShortIDGTE applies the GTE predicate on the "short_id" field.
func ShortIDGTE(v string) predicate.Room {
	return predicate.Room(sql.FieldGTE(FieldShortID, v))
}

// ShortIDLT applies the LT predicate on the "short_id" field.
func ShortIDLT(v string) predicate.Room {
	return predicate.Room(sql.FieldLT(FieldShortID, v))
}

// ShortIDLTE applies the LTE predicate on the "short_id" field.
func ShortIDLTE(v string) predicate.Room {
	return predicate.Room(sql.FieldLTE(FieldShortID, v))
}

// ShortIDContains applies the Contains predicate on the "short_id" field.
func ShortIDContains(v string) predicate.Room {
	return predicate.Room(sql.FieldContains(FieldShortID, v))
}

// ShortIDHasPrefix applies the HasPrefix predicate on the "short_id" field.
func ShortIDHasPrefix(v string) predicate.Room {
	return predicate.Room(sql.FieldHasPrefix(FieldShortID, v))
}

// ShortIDHasSuffix applies the HasSuffix predicate on the "short_id" field.
func ShortIDHasSuffix(v string) predicate.Room {
	return predicate.Room(sql.FieldHasSuffix(FieldShortID, v))
}

// ShortIDEqualFold applies the EqualFold predicate on the "short_id" field.
func ShortIDEqualFold(v string) predicate.Room {
	return predicate.Room(sql.FieldEqualFold(FieldShortID, v))
}

// ShortIDContainsFold applies the ContainsFold predicate on the "short_id" field.
func ShortIDContainsFold(v string) predicate.Room {
	return predicate.Room(sql.FieldContainsFold(FieldShortID, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Room {
	return predicate.Room(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Room {
	return predicate.Room(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Room {
	return predicate.Room(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Room {
	return predicate.Room(sql.FieldNotIn(FieldStatus, vs...))
}

// MaxParticipantsEQ applies the EQ predicate on the "max_participants" field.
func MaxParticipantsEQ(v int8) predicate.Room {
	return predicate.Room(sql.FieldEQ(FieldMaxParticipants, v))
}

// MaxParticipantsNEQ applies the NEQ predicate on the "max_participants" field.
func MaxParticipantsNEQ(v int8) predicate.Room {
	return predicate.Room(sql.FieldNEQ(FieldMaxParticipants, v))
}

// MaxParticipantsIn applies the In predicate on the "max_participants" field.
func MaxParticipantsIn(vs ...int8) predicate.Room {
	return predicate.Room(sql.FieldIn(FieldMaxParticipants, vs...))
}

// MaxParticipantsNotIn applies the NotIn predicate on the "max_participants" field.
func MaxParticipantsNotIn(vs ...int8) predicate.Room {
	return predicate.Room(sql.FieldNotIn(FieldMaxParticipants, vs...))
}

// MaxParticipantsGT applies the GT predicate on the "max_participants" field.
func MaxParticipantsGT(v int8) predicate.Room {
	return predicate.Room(sql.FieldGT(FieldMaxParticipants, v))
}

// MaxParticipantsGTE applies the GTE predicate on the "max_participants" field.
func MaxParticipantsGTE(v int8) predicate.Room {
	return predicate.Room(sql.FieldGTE(FieldMaxParticipants, v))
}

// MaxParticipantsLT applies the LT predicate on the "max_participants" field.
func MaxParticipantsLT(v int8) predicate.Room {
	return predicate.Room(sql.FieldLT(FieldMaxParticipants, v))
}

// MaxParticipantsLTE applies the LTE predicate on the "max_participants" field.
func MaxParticipantsLTE(v int8) predicate.Room {
	return predicate.Room(sql.FieldLTE(FieldMaxParticipants, v))
}

// PermissionVideoEQ applies the EQ predicate on the "permission_video" field.
func PermissionVideoEQ(v PermissionVideo) predicate.Room {
	return predicate.Room(sql.FieldEQ(FieldPermissionVideo, v))
}

// PermissionVideoNEQ applies the NEQ predicate on the "permission_video" field.
func PermissionVideoNEQ(v PermissionVideo) predicate.Room {
	return predicate.Room(sql.FieldNEQ(FieldPermissionVideo, v))
}

// PermissionVideoIn applies the In predicate on the "permission_video" field.
func PermissionVideoIn(vs ...PermissionVideo) predicate.Room {
	return predicate.Room(sql.FieldIn(FieldPermissionVideo, vs...))
}

// PermissionVideoNotIn applies the NotIn predicate on the "permission_video" field.
func PermissionVideoNotIn(vs ...PermissionVideo) predicate.Room {
	return predicate.Room(sql.FieldNotIn(FieldPermissionVideo, vs...))
}

// PermissionAudioEQ applies the EQ predicate on the "permission_audio" field.
func PermissionAudioEQ(v PermissionAudio) predicate.Room {
	return predicate.Room(sql.FieldEQ(FieldPermissionAudio, v))
}

// PermissionAudioNEQ applies the NEQ predicate on the "permission_audio" field.
func PermissionAudioNEQ(v PermissionAudio) predicate.Room {
	return predicate.Room(sql.FieldNEQ(FieldPermissionAudio, v))
}

// PermissionAudioIn applies the In predicate on the "permission_audio" field.
func PermissionAudioIn(vs ...PermissionAudio) predicate.Room {
	return predicate.Room(sql.FieldIn(FieldPermissionAudio, vs...))
}

// PermissionAudioNotIn applies the NotIn predicate on the "permission_audio" field.
func PermissionAudioNotIn(vs ...PermissionAudio) predicate.Room {
	return predicate.Room(sql.FieldNotIn(FieldPermissionAudio, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Room {
	return predicate.Room(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Room {
	return predicate.Room(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Room {
	return predicate.Room(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Room {
	return predicate.Room(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Room {
	return predicate.Room(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Room {
	return predicate.Room(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Room {
	return predicate.Room(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Room {
	return predicate.Room(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Room {
	return predicate.Room(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Room {
	return predicate.Room(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Room {
	return predicate.Room(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Room {
	return predicate.Room(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Room {
	return predicate.Room(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Room {
	return predicate.Room(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Room {
	return predicate.Room(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Room {
	return predicate.Room(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasAdmins applies the HasEdge predicate on the "admins" edge.
func HasAdmins() predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, AdminsTable, AdminsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAdminsWith applies the HasEdge predicate on the "admins" edge with a given conditions (other predicates).
func HasAdminsWith(preds ...predicate.User) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		step := newAdminsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Room) predicate.Room {
	return predicate.Room(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Room) predicate.Room {
	return predicate.Room(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Room) predicate.Room {
	return predicate.Room(sql.NotPredicates(p))
}
