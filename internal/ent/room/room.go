// Code generated by ent, DO NOT EDIT.

package room

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the room type in the database.
	Label = "room"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldShortID holds the string denoting the short_id field in the database.
	FieldShortID = "short_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldMaxParticipants holds the string denoting the max_participants field in the database.
	FieldMaxParticipants = "max_participants"
	// FieldPermissionVideo holds the string denoting the permission_video field in the database.
	FieldPermissionVideo = "permission_video"
	// FieldPermissionAudio holds the string denoting the permission_audio field in the database.
	FieldPermissionAudio = "permission_audio"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeAdmins holds the string denoting the admins edge name in mutations.
	EdgeAdmins = "admins"
	// Table holds the table name of the room in the database.
	Table = "rooms"
	// AdminsTable is the table that holds the admins relation/edge. The primary key declared below.
	AdminsTable = "room_admins"
	// AdminsInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	AdminsInverseTable = "users"
)

// Columns holds all SQL columns for room fields.
var Columns = []string{
	FieldID,
	FieldShortID,
	FieldStatus,
	FieldMaxParticipants,
	FieldPermissionVideo,
	FieldPermissionAudio,
	FieldCreatedAt,
	FieldUpdatedAt,
}

var (
	// AdminsPrimaryKey and AdminsColumn2 are the table columns denoting the
	// primary key for the admins relation (M2M).
	AdminsPrimaryKey = []string{"room_id", "user_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultShortID holds the default value on creation for the "short_id" field.
	DefaultShortID func() string
	// DefaultMaxParticipants holds the default value on creation for the "max_participants" field.
	DefaultMaxParticipants int8
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// StatusActive is the default value of the Status enum.
const DefaultStatus = StatusActive

// Status values.
const (
	StatusActive   Status = "active"
	StatusInactive Status = "inactive"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusActive, StatusInactive:
		return nil
	default:
		return fmt.Errorf("room: invalid enum value for status field: %q", s)
	}
}

// PermissionVideo defines the type for the "permission_video" enum field.
type PermissionVideo string

// PermissionVideoAllParticipants is the default value of the PermissionVideo enum.
const DefaultPermissionVideo = PermissionVideoAllParticipants

// PermissionVideo values.
const (
	PermissionVideoAllParticipants PermissionVideo = "all_participants"
	PermissionVideoOnlyAdmins      PermissionVideo = "only_admins"
)

func (pv PermissionVideo) String() string {
	return string(pv)
}

// PermissionVideoValidator is a validator for the "permission_video" field enum values. It is called by the builders before save.
func PermissionVideoValidator(pv PermissionVideo) error {
	switch pv {
	case PermissionVideoAllParticipants, PermissionVideoOnlyAdmins:
		return nil
	default:
		return fmt.Errorf("room: invalid enum value for permission_video field: %q", pv)
	}
}

// PermissionAudio defines the type for the "permission_audio" enum field.
type PermissionAudio string

// PermissionAudioAllParticipants is the default value of the PermissionAudio enum.
const DefaultPermissionAudio = PermissionAudioAllParticipants

// PermissionAudio values.
const (
	PermissionAudioAllParticipants PermissionAudio = "all_participants"
	PermissionAudioOnlyAdmins      PermissionAudio = "only_admins"
)

func (pa PermissionAudio) String() string {
	return string(pa)
}

// PermissionAudioValidator is a validator for the "permission_audio" field enum values. It is called by the builders before save.
func PermissionAudioValidator(pa PermissionAudio) error {
	switch pa {
	case PermissionAudioAllParticipants, PermissionAudioOnlyAdmins:
		return nil
	default:
		return fmt.Errorf("room: invalid enum value for permission_audio field: %q", pa)
	}
}

// OrderOption defines the ordering options for the Room queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByShortID orders the results by the short_id field.
func ByShortID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShortID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByMaxParticipants orders the results by the max_participants field.
func ByMaxParticipants(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaxParticipants, opts...).ToFunc()
}

// ByPermissionVideo orders the results by the permission_video field.
func ByPermissionVideo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPermissionVideo, opts...).ToFunc()
}

// ByPermissionAudio orders the results by the permission_audio field.
func ByPermissionAudio(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPermissionAudio, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByAdminsCount orders the results by admins count.
func ByAdminsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAdminsStep(), opts...)
	}
}

// ByAdmins orders the results by admins terms.
func ByAdmins(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAdminsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newAdminsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AdminsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, AdminsTable, AdminsPrimaryKey...),
	)
}
